{"ast":null,"code":"var _jsxFileName = \"/Users/jennablubaugh/Documents/GitHub/React-Application---Jenna-B./src/components/Sidebar.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useCallback } from \"react\";\n/**\n * Renders an array of strings passed in that can be filtered and added to as an\n * unordered list.\n * @returns Component\n */\nimport ReactDOM from 'react-dom/client';\n//DO I need this?\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Sidebar(_ref) {\n  _s();\n  let {\n    initialMenuItems\n  } = _ref;\n  let [newMenuItem, setNewMenuItem] = useState(\"\");\n  let [menuItems, setMenuItems] = useState(initialMenuItems);\n  // TODO: 2 Using a state hook, maintain the current menu items as an array state.\n  // let [menuItems, setMenuItems] = useState(initialMenuItems)\n\n  let [filter, setFilter] = useState(\"\");\n  // Adds a single string passed in as parameter to the state element\n  // \"menuItems\" that holds the set of current menu items.\n\n  let addMenuItem = useCallback(() => {\n    setMenuItems([newMenuItem, ...menuItems]);\n    setNewMenuItem(\"\");\n    console.log(\"Added menu item\");\n    //   // TODO: 3. Add a new menu item to the correct variable associated with this class.\n    //   // This involves adding a parameter and changing a class instance variable (props).\n    //   setMenuItems([item, ...menuItems])\n  }, [newMenuItem, menuItems]);\n  const filteredMenuItems = menuItems.filter(item => item.toLowerCase().includes(filter.toLowerCase()));\n\n  // TODO: 4. Display ONLY the menu items that contain the filter element value\n  // \"term\" in them. Each menu item should be an unordered list item wrapped in an unordered list (ul) element.\n\n  // TODO: 1 Render inside the outer div an unordered list of the menu items, with each string in the array\n  // its own item.\n\n  //Find the first \"TODO\" comment in the \"Sidebar\" component.\n  //Implement the rendering of an unordered list of menu items using the initialMenuItems prop, which is an array of strings.\n  //Ensure that the rendered result aligns with the expected behavior outlined in the \"index.js\" file.\n  //Refer to the provided animation for an overview of the intended component behavior.\n\n  //using the w3schools example\n\n  //function Car(props){\n  //return <li>I am a {props.brand}</li>;\n  //}\n  //function Garage(){\n  //const cars = ['Ford', 'BMW', 'Mercedes'];\n  //return (\n  // <ul>\n  //   {cars.map((car) => <Car brand={car} />)}\n  // </ul>\n  // );\n  //}\n  //const root = ReactDOM.createRoot(document.getElementById('root'));\n  //root.render(<Garage />);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"root\",\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      children: filteredMenuItems.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"key=\", index, item]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"newMenuItemValue\",\n      value: newMenuItem,\n      onChange: event => setNewMenuItem(event.target.value),\n      placeholder: \"New Menu Item\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addMenuItem => {\n        /* TODO: 3 */\n      },\n      children: \"Add Item\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"filter\",\n      type: \"text\",\n      value: filter,\n      onChange: event => setFilter(event.target.value),\n      placeholder: \"Filter by...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n_s(Sidebar, \"/oaa6lp+ngPTBrV4SYZja6S1wK0=\");\n_c = Sidebar;\nvar _c;\n$RefreshReg$(_c, \"Sidebar\");","map":{"version":3,"names":["useState","useCallback","ReactDOM","Sidebar","initialMenuItems","newMenuItem","setNewMenuItem","menuItems","setMenuItems","filter","setFilter","addMenuItem","console","log","filteredMenuItems","item","toLowerCase","includes","map","index","event","target","value"],"sources":["/Users/jennablubaugh/Documents/GitHub/React-Application---Jenna-B./src/components/Sidebar.jsx"],"sourcesContent":["import { useState, useCallback } from \"react\"\n/**\n * Renders an array of strings passed in that can be filtered and added to as an\n * unordered list.\n * @returns Component\n */\nimport ReactDOM from 'react-dom/client';\n//DO I need this?\n\n\n\n\nexport default function Sidebar({initialMenuItems}) {\n  let [newMenuItem, setNewMenuItem] = useState(\"\")\n  let [menuItems, setMenuItems] = useState(initialMenuItems)\n  // TODO: 2 Using a state hook, maintain the current menu items as an array state.\n  // let [menuItems, setMenuItems] = useState(initialMenuItems)\n\n\n\n\n\n  let [filter, setFilter] = useState(\"\")\n  // Adds a single string passed in as parameter to the state element\n  // \"menuItems\" that holds the set of current menu items.\n\n\n\n\n\n  let addMenuItem = useCallback(() => {\n    setMenuItems([newMenuItem, ...menuItems])\n    setNewMenuItem(\"\")\n    console.log(\"Added menu item\")\n    //   // TODO: 3. Add a new menu item to the correct variable associated with this class.\n    //   // This involves adding a parameter and changing a class instance variable (props).\n    //   setMenuItems([item, ...menuItems])\n  }, [newMenuItem, menuItems])\n\n\nconst filteredMenuItems = menuItems.filter((item) => item.toLowerCase().includes(filter.toLowerCase()))\n\n\n\n  // TODO: 4. Display ONLY the menu items that contain the filter element value\n  // \"term\" in them. Each menu item should be an unordered list item wrapped in an unordered list (ul) element.\n\n\n\n\n\n\n\n\n  // TODO: 1 Render inside the outer div an unordered list of the menu items, with each string in the array\n  // its own item.\n\n  //Find the first \"TODO\" comment in the \"Sidebar\" component.\n//Implement the rendering of an unordered list of menu items using the initialMenuItems prop, which is an array of strings.\n//Ensure that the rendered result aligns with the expected behavior outlined in the \"index.js\" file.\n//Refer to the provided animation for an overview of the intended component behavior.\n\n//using the w3schools example\n\n//function Car(props){\n  //return <li>I am a {props.brand}</li>;\n//}\n//function Garage(){\n  //const cars = ['Ford', 'BMW', 'Mercedes'];\n  //return (\n   // <ul>\n   //   {cars.map((car) => <Car brand={car} />)}\n   // </ul>\n // );\n//}\n//const root = ReactDOM.createRoot(document.getElementById('root'));\n//root.render(<Garage />);\n\n\n\n  return (\n    <div id=\"root\">\n\n<ul>\n        {filteredMenuItems.map((item, index) => (\n          <li>key={index}{item}</li>\n        ))}\n      </ul>\n\n      <input\n        type=\"text\"\n        id=\"newMenuItemValue\"\n        value={newMenuItem}\n        onChange={(event) => setNewMenuItem(event.target.value)}\n        placeholder=\"New Menu Item\"\n      ></input>\n\n\n\n      <br />\n      <button\n        onClick={(addMenuItem) => {\n          /* TODO: 3 */\n        }}\n      >\n        Add Item\n      </button>\n      <br />\n      <input\n        id=\"filter\"\n        type=\"text\"\n        value={filter}\n        onChange={(event) => setFilter(event.target.value)}\n        placeholder=\"Filter by...\"\n      ></input>\n\n    </div>\n  )\n}\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAC7C;AACA;AACA;AACA;AACA;AACA,OAAOC,QAAQ,MAAM,kBAAkB;AACvC;AAAA;AAKA,eAAe,SAASC,OAAO,OAAqB;EAAA;EAAA,IAApB;IAACC;EAAgB,CAAC;EAChD,IAAI,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAChD,IAAI,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAACI,gBAAgB,CAAC;EAC1D;EACA;;EAMA,IAAI,CAACK,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACtC;EACA;;EAMA,IAAIW,WAAW,GAAGV,WAAW,CAAC,MAAM;IAClCO,YAAY,CAAC,CAACH,WAAW,EAAE,GAAGE,SAAS,CAAC,CAAC;IACzCD,cAAc,CAAC,EAAE,CAAC;IAClBM,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;IAC9B;IACA;IACA;EACF,CAAC,EAAE,CAACR,WAAW,EAAEE,SAAS,CAAC,CAAC;EAG9B,MAAMO,iBAAiB,GAAGP,SAAS,CAACE,MAAM,CAAEM,IAAI,IAAKA,IAAI,CAACC,WAAW,EAAE,CAACC,QAAQ,CAACR,MAAM,CAACO,WAAW,EAAE,CAAC,CAAC;;EAIrG;EACA;;EASA;EACA;;EAEA;EACF;EACA;EACA;;EAEA;;EAEA;EACE;EACF;EACA;EACE;EACA;EACC;EACA;EACA;EACF;EACD;EACA;EACA;;EAIE,oBACE;IAAK,EAAE,EAAC,MAAM;IAAA,wBAElB;MAAA,UACSF,iBAAiB,CAACI,GAAG,CAAC,CAACH,IAAI,EAAEI,KAAK,kBACjC;QAAA,WAAI,MAAI,EAACA,KAAK,EAAEJ,IAAI;MAAA;QAAA;QAAA;QAAA;MAAA,QACrB;IAAC;MAAA;MAAA;MAAA;IAAA,QACC,eAEL;MACE,IAAI,EAAC,MAAM;MACX,EAAE,EAAC,kBAAkB;MACrB,KAAK,EAAEV,WAAY;MACnB,QAAQ,EAAGe,KAAK,IAAKd,cAAc,CAACc,KAAK,CAACC,MAAM,CAACC,KAAK,CAAE;MACxD,WAAW,EAAC;IAAe;MAAA;MAAA;MAAA;IAAA,QACpB,eAIT;MAAA;MAAA;MAAA;IAAA,QAAM,eACN;MACE,OAAO,EAAGX,WAAW,IAAK;QACxB;MAAA,CACA;MAAA,UACH;IAED;MAAA;MAAA;MAAA;IAAA,QAAS,eACT;MAAA;MAAA;MAAA;IAAA,QAAM,eACN;MACE,EAAE,EAAC,QAAQ;MACX,IAAI,EAAC,MAAM;MACX,KAAK,EAAEF,MAAO;MACd,QAAQ,EAAGW,KAAK,IAAKV,SAAS,CAACU,KAAK,CAACC,MAAM,CAACC,KAAK,CAAE;MACnD,WAAW,EAAC;IAAc;MAAA;MAAA;MAAA;IAAA,QACnB;EAAA;IAAA;IAAA;IAAA;EAAA,QAEL;AAEV;AAAC,GA1GuBnB,OAAO;AAAA,KAAPA,OAAO;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}